Există mai multe modele și standarde care, într-un grad sau altul, reglementează ciclul de viață al lucrului cu clientul, majoritatea se referă la software personalizat și, pe lângă sistemul informațional se reglementează și procesele de dezvoltare:
Este imposibil să se rezolve problema creșterii eficienței managementului producției sau a planificării serviciilor în condiții moderne fără introducerea celor mai noi tehnologii informaționale și a metodelor moderne de management.
Cea mai promițătoare direcție de astăzi este dezvoltarea sistemelor de management sectorial, și anume pe necesitățile concrete a intreprinderilor. În acest sens sistemul de gestiune a programărilor ocupă un loc important, pentru că oferă o mai bună organizare a timpului atât pentru companie cât și pentru client.
Etapele implemnetării unui sistem automatizat de gestiune a programărilor conține următoarele elemente de bază:
Studiul obiectului de automatizare (analiză) și formularea cerințelor utilizatorilor pentru sistemul de control.
Stabilirea obiectivelor. 
Analiza metodelor existente și a mijloacelor de automatizare a obiectelor similare și a formulării, pe baza cerințelor utilizatorilor, a obiectivelor realizabile pentru funcționarea sistemului de control. 
Obiectivele trebuie să fie clare, explicite și măsurabile. 
Obiectivele ar trebui să definească: scopul general al sistemului, definirea diferitelor grupuri de utilizatori și rolurile acestora, listarea detaliată a funcțiilor sistemului, tipurile de documentație necesară, parametrii de performanță, compatibilitatea cu alte produse și standarde, configurațiile hardware, măsurile de securitate, metodele și mijloace de personalizare și întreținere, metode de asigurare a fiabilității sistemului.
 Obiectivele nu trebuie să intre în conflict unul cu celălalt, deoarece acestea trebuie ghidate pentru a elabora soluții de compromis în următoareleetape de proiectare.
Dezvoltarea arhitecturii sistemului (descompunerea structurii funcționale și determinarea conexiunilor între elementele sale). 
Alocarea nivelurilor de gestionare, subsistemelor,complexelor de sarcini, sarcinilor și funcțiilor de gestionare.
Dezvoltarea unui model infologic al sistemului care descrie statica și dinamica obiectului. 
Formalizarea modelelor de stare a unui obiect, fluxuri materiale, financiare și de informații (control) și interacțiunea lor între ele. 
Dezvoltarea unui sistem de clasificare pentru obiecte de contabilitate a clienților și gestionare și identificarea parametrilor acestora. Dicționarele descriu conceptele de bază ale subiectului sistemului, necesare dezvoltării algoritmilor standard pentru prelucrarea datelor. Clasificatorii descriu structura unui obiect (departamente, angajați, poziții), mediul extern (clienți, raioane, puncte de încărcare / descărcare), caracteristicile fluxurilor de materiale (părți, fonduri, unități de măsură, indicatori de calitate, tipuri de prețuri, tipuri de plată). Operațiile tipice descriu algoritmi de control (procesarea informațiilor). 
Dezvoltarea unui model informațional al sistemului (proiectarea structurilor bazei de date și a legăturilor acestora). 
Sinteza structurii software-ului (agregarea sistemului). Atunci când combinăm funcțiile de control individuale în module software, este necesar să depunem eforturi pentru o „rezistență” ridicată și o „aderență” slabă a modulelor. 
Puterea și aderența unui modul sunt, respectiv, măsuri ale conexiunilor sale interne și externe. În funcție de scopul modulelor, este necesar să ne străduim fie pentru puterea funcțională a acestora (unificarea funcțiilor de control interdependente), fie pentru puterea informației (unificarea funcțiilor efectuate pe un subset limitat al spațiului informațional al sistemului). 
Alegerea unei metode de asamblare și testare a sistemului. Există mai multe metode cunoscute pentru asamblarea și testarea sistemelor software complexe: de jos în sus, de sus în jos, modificat de sus în jos, salt mare, metodă sandwich, metodă sandwich modificată. Se recomandă utilizarea unei metode sandwich modificate pentru testarea sistemului, în care modulele nivelurilor de control inferioare sunt testate de jos în sus, iar modulele nivelurilor de control superioare sunt mai întâi testate autonom și apoi asamblate în agregate folosind partea de sus -metoda de reducere. Avantajele metodei propuse sunt: paralelism ridicat în programarea modulelor, un număr mic de butoane și timp minim pentru apariția unei versiuni de lucru a sistemului. Secvența de proiectare și programare a modulelor individuale depinde de metoda aleasă de asamblare și testare. 
Proiectarea modulelor. Dezvoltarea de specificații externe care descriu interfețe (conexiuni) între module și proiectarea logicii (algoritmilor) modulelor. Modulele de programare pe software-ul selectat. Când programăm, amintiți-vă că textul programului este necesar pentru a comunica cu oamenii și nu cu o mașină. Importanța acestei afirmații va deveni evidentă atunci când vine etapa de întreținere a sistemului. Pentru a îmbunătăți fiabilitatea software-ului, este necesar să se utilizeze metoda neîncrederii reciproce a modulelor în timpul programării, adică fiecare modul al sistemului trebuie să trateze cu un anumit grad de neîncredere, în limite rezonabile, la datele de intrare primite și verificați-le înainte de procesare. Integrarea (asamblarea) sistemului în conformitate cu metoda aleasă și testarea acestuia. 
Etape de testare:
 testare autonomă - controlul unui modul software separat izolat de alte module,
 testarea interfeței - controlul interfețelor dintre părțile sistemului, testarea funcției - controlul executării funcțiilor de control automat de către sistem, 
testarea complexă - testarea comportamentul sistemului în raport cu obiectivele inițiale, testarea acceptării - verificarea conformității sistemului cu cerințele utilizatorilor. 
Testarea este procesul de executare a unui program pentru a găsi erori în acesta. Există două abordări pentru testarea proiectării - testarea în funcție de specificații (nepăsarea de textul programului) și testarea în funcție de textul programului (nepăsarea de specificații). Un compromis rezonabil se află undeva între ele deplasându-se într-o direcție sau alta în funcție de funcțiile îndeplinite de un anumit modul. 
Dezvoltarea suportului metodologic. Manuale de utilizare, instrucțiuni de utilizare, instrucțiuni tehnologice. Implementarea sistemului la instalație. Întreținerea sistemului: eliminarea erorilor și comentariilor utilizatorilor, dezvoltarea de moduri suplimentare și funcții de control, extinderea funcțională a sistemului. În conformitate cu modelul în spirală al ciclului de viață al software-ului, se efectuează trecerea la etapele 1 - 10 ale proiectării sistemului.
